#   Log4J Configuration Quick Reference:
#   ====================================
   
#   Priority order is DEBUG < INFO < WARN < ERROR < FATAL

#   PatternLayout conversion characters:
   
#   %c   Category of the logging event
#   %C   Fully qualified class name of the caller
#   %d   Date of the logging event  (example: %d{HH:mm:ss,SSS} )
#   %F   File name where the logging request was issued (caution: extremely slow)
#   %l   Location information of the caller (caution: extremely slow)
#   %L   Line number from where the logging request was issued (caution: extremely slow)
#   %m   Application-supplied message
#   %M   Method name from where the logging request was issued (caution: extremely slow)
#   %n   Line separator
#   %p   Priority of the logging event
#   %r   Number of milliseconds since the start of the application
#   %t   Name of the thread that generated the logging event
#   %x   Nested diagnotic context associated with the thread
#   %%   A single percent sign

#   Format modifiers examples:
  
#   %20c     Left pad with spaces if category is less than 20 characters long
#   %-20c    Right pad with spaces if category is less than 20 characters long
#   %.30c    Truncate from the beginning if category is more than 30 chars long
#   %20.30c  Left pad 20 chars + truncate from beginning if more than 30 chars
#   %-20.30c Right pad 20 chars + truncate from beginning if more than 30 chars

#   Examples:  "%r [%t] %-5p %c %x - %m\n"
#              "%-6r [%15.15t] %-5p %30.30c %x - %m\n"

# WARNING: Location information can be useful but is very costly in
# terms of computation.


# The root logger uses the appenders called TEST and PRODUCT. Since no level
# is specified, note the empty string between the comma (",") and the
# equals sign ("="), the level of the root logger remains
# untouched. Log4j always initializes the level for the root logger to
# DEBUG. The root logger is the only logger that has a default
# level. Bu default, all other loggers do not have an assigned level,
# such that they inherit their level instead.

log4j.rootLogger=info,stdout,TEST

log4j.logger.net.sf.hibernate=info

# log JDBC bind parameters
log4j.logger.net.sf.hibernate.type=info

#log schema export/update
log4j.logger.net.sf.hibernate.tool.hbm2ddl=debug

# A1 is set to be ConsoleAppender sending its output to System.out
log4j.appender.TEST=org.apache.log4j.ConsoleAppender
log4j.appender.PRODUCT=org.apache.log4j.ConsoleAppender
log4j.appender.stdout=org.apache.log4j.ConsoleAppender

# The conversion pattern consists of date in ISO8601 format, level,
# thread name, logger name truncated to its rightmost two components
# and left justified to 17 characters, location information consisting
# of file name (padded to 13 characters) and line number, nested
# diagnostic context, the and the application supplied message

# stdout
log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
log4j.appender.stdout.layout.ConversionPattern = %d{yyyy-MM-dd HH:mm:ss} %-5p [%c] %m%n

# Appender TEST writes to the file
log4j.appender.TEST=org.apache.log4j.DailyRollingFileAppender
log4j.appender.TEST.File=tea-test.log

# Appender TEST uses the PatternLayout.
log4j.appender.TEST.layout=org.apache.log4j.PatternLayout
log4j.appender.TEST.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss} %-5p [%c] %m%n

# Appender PRODUCT writes to the file
log4j.appender.PRODUCT=org.apache.log4j.DailyRollingFileAppender
log4j.appender.PRODUCT.File=tea.log

# Appender PRODUCT uses the PatternLayout.
log4j.appender.PRODUCT.layout=org.apache.log4j.PatternLayout
log4j.appender.PRODUCT.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss} %-5p [%c] %m%n

